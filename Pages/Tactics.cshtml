@page
@model TacticsModel
@{
    ViewData["Title"] = "Tactics";
}
<!DOCTYPE HTML>

<html>
<head>
    <link rel="stylesheet" href="~/js/Libs/chessboardjs/css/chessboard-0.3.0.css" />
    <script type="text/javascript" src="~/js/Libs/chessboardjs/js/chessboard-0.3.0.js"></script>
    <script type="text/javascript" src="~/js/Libs/chess.js/chess.js"></script>
    <script src="https://code.jquery.com/jquery-1.10.1.js"></script>
</head>
<body>
    <center>
        <div id="board1" style="width: 400px" class="pp"></div>
    </center>
    <script>
        var LoadBoard = function () {
            //New stuff here
            var board,
                game = new Chess(),
                statusEl = $('#status'),
                fenEl = $('#fen'),
                pgnEl = $('#pgn');
            //Game still on?/Check turn
            var onDragStart = function (source, piece, position, orientation) {
                if (game.game_over() === true ||
                    (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                    (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
                    return false;
                }
            };
            var onDrop = function (source, target) {
                // see if the move is legal
                var move = game.move({
                    from: source,
                    to: target,
                    promotion: 'q' // NOTE: always promote to a queen for example simplicity
                });
                console.log(move.from + " " + move.to);
                // illegal move
                if (move === null) return 'snapback';

                updateStatus();
            };
            var onSnapEnd = function () {
                board.position(game.fen());
            };

            var updateStatus = function () {
                var status = '';

                var moveColor = 'White';
                if (game.turn() === 'b') {
                    moveColor = 'Black';
                }

                // checkmate?
                if (game.in_checkmate() === true) {
                    status = 'Game over, ' + moveColor + ' is in checkmate.';
                }

                // draw?
                else if (game.in_draw() === true) {
                    status = 'Game over, drawn position';
                }

                // game still on
                else {
                    status = moveColor + ' to move';

                    // check?
                    if (game.in_check() === true) {
                        status += ', ' + moveColor + ' is in check';
                    }
                }

                statusEl.html(status);
                fenEl.html(game.fen());
                pgnEl.html(game.pgn());
            };
            function pieceTheme(piece) {
                // wikipedia theme for white pieces
                if (piece.search(/w/) !== -1) {
                    return '/images/wikipedia/' + piece + '.png';
                }

                // wikipedia theme for black pieces
                return '/images/wikipedia/' + piece + '.png';
            }
            var cfg = {
                draggable: true,
                dropOffBoard: 'snapback',
                pieceTheme: pieceTheme,
                position: 'start',
                onDragStart: onDragStart,
                onDrop: onDrop,
                onSnapEnd: onSnapEnd
            }
            board = ChessBoard('board1', cfg);
        }
        $(document).ready(LoadBoard);

    </script>
</body>
</html>